# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lnv8ND6Fo1vP6uFZnwazoUnP45J20yNa
"""

import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler , LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression , LogisticRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

download = drive.CreateFile({'id': '10zdupaMzMGNqw0kqqfAFjxgluAvPHYLa'})
download.GetContentFile('Housing.csv')
#p = 0.3
file = pd.read_csv('Housing.csv')
print(file.head())

file=file.drop(['id', 'url','region_url', 'smoking_allowed','wheelchair_access','electric_vehicle_charge', 'laundry_options', 'image_url', 'description', 'lat', 'long',], axis = 'columns').copy()
print(file.head())
file['parking_options']=file.parking_options.fillna('no parking')
file['pets_allowed'] = (file['cats_allowed'] & file['dogs_allowed']).astype(int)
file = file.drop(['cats_allowed', 'dogs_allowed'], axis = 'columns')
parkings = ['carport', 'attached garage', 'off-street parking', 'detached garage', 'valet parking']
file['parking_options'] = [1 if x in parkings else 0 for x in file['parking_options']]
file['baths'] = file['baths'].astype(int)

types = file.type.value_counts()[file.type.value_counts() < 15885  ]
file.type=file.type.apply(lambda x:'other' if x in types else x)
file = file.query('sqfeet>=120 and sqfeet<=500')
file = file.query('beds<4')
file = file.query('baths<3')
file = file.query('price>100 and price<1000').copy()

__fig, axes = plt.subplots(nrows=len(file['type'].unique()), figsize=(5,20))
for i, (key, subdf) in enumerate(file.groupby('type')):
    sns.scatterplot(x=subdf.sqfeet, y=subdf.price, ax=axes[i])
    axes[i].set_title(key)   
#plt.show()

cc = file.corr(numeric_only=True)
sns.heatmap(cc, annot=True)

plt.figure(figsize=(13,10), facecolor='xkcd:eggshell')
plotnumber =1
house_cont= file[['price','sqfeet','beds','baths']]
for column in house_cont:
    if plotnumber<=10:
        ax=plt.subplot(2,2,plotnumber)
        sns.distplot(house_cont[column], color='k')
        plt.xlabel(column.upper(), fontsize = 20)
        
    plotnumber+=1
plt.tight_layout()
plt.show()

value1 = pd.get_dummies(file.region)
value2 = pd.get_dummies(file.type)
value3 = pd.get_dummies(file.state)
file = pd.concat([file,value1,value2,value3], axis = 'columns').drop(['region','type','state'], axis = 'columns')
print(file.head())

#file = file.iloc[:,:7]
y = file[["price"]]
print(y.shape)
#y.shape
x = file.drop('price', axis = 'columns')
#x_scaled =StandardScaler().fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state=12345)
#print(y_test)

reg_tree = DecisionTreeRegressor()
reg_tree.fit(x_train,y_train)
y_pred = reg_tree.predict(x_test)
print("DecisionTree")
print('Mean Absolute Error',mean_absolute_error(y_test, y_pred))
print('Mean Squared Error',mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error',np.sqrt(mean_squared_error(y_test, y_pred)))
print('R2 score',r2_score(y_test, y_pred))

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
lr2 = LogisticRegression(solver="liblinear")
lr2.fit(x_train, y_train)
y_pred = lr2.predict(x_test)
print("Logistic Regressor")
print('Mean Absolute Error',mean_absolute_error(y_test, y_pred))
print('Mean Squared Error',mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error',np.sqrt(mean_squared_error(y_test, y_pred)))
print('R2 score',r2_score(y_test, y_pred))

from sklearn.ensemble import RandomForestRegressor
ran = RandomForestRegressor(n_estimators=90)
ran.fit(x_train,y_train)
y_pred = ran.predict(x_test)
print("RandomForest Regressor")
print('Mean Absolute Error',mean_absolute_error(y_test, y_pred))
print('Mean Squared Error',mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error',np.sqrt(mean_squared_error(y_test, y_pred)))
print('R2 score',r2_score(y_test, y_pred))